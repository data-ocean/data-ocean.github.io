
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/data-ocean.github.io/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/data-ocean.github.io/about",
    "title": "About me",
    "body": " TL;DR   I am Stephan Osterburg, located in the Bay Area - San Francisco, CA. I am a computer graphics veteran who is falling in love with data science.  Hello, I am Stephan Osterburg, a Data Scientist and an accomplished digital production expert and computer artist, located in the San Francisco Bay Area. After some unfortunate events in our live I made the bold decision to change my career. Why you might ask. Well, it's not like it fall out of the sky. No, I had always a fascination with data and visualization. After taking a well deserved brake last year and been able to reflect on what I would like to do, I found Data Science. Since summer 2018, including six months at Flatiron School, I am full gas on the quest to discover the world of data and worked relentlessly to gain all the necessary knowledge, and expertise one needs as a Data Scientist. I enjoy a challenging, progressive environment that offers room to innovate. My experience and knowledge include:    Overseeing a team on numerous animated feature film productions.   Serving in a wide range of technical and creative positions, ranging from software engineer to VFX and CG Supervisor.   Identifying opportunities for improvements and proposing realistic changes to streamline workflow processes and decrease production delays.   Data Science projects include analyzing news content of its authenticity, forest cover type classification and image classification etcetera.   Python, Pandas, Numpy, dask, keras/tensorflow, sklearn, Machine Learning, Deep Learning etcetera.   Here is small banner with all the movies I worked on over the years and my last demoreel with work from movies I worked on while I was at PDI/Dreamworks.  Current &amp; PastThank you for checking our my blog! For more data science stuff I have done since October 2018, head over to github . Head over to linkedin for more information about me. "
    }, {
    "id": 2,
    "url": "http://localhost:4000/data-ocean.github.io/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/data-ocean.github.io/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                           Text Classification (Part 3)                              :               Using Big Data:                                                                                                                                                                       Stephan                                07 Apr 2019                                                                                                                                                                                                                                                                                                                  Text Classification (Part 2)                              :               Exploratory Data Analysis:                                                                                                                                                                       Stephan                                06 Apr 2019                                                                                                                                                                                                                                                                                                                  Text Classification (Part 1)                              :               Reliable or Unreliable?:                                                                                                                                                                       Stephan                                02 Apr 2019                                                                                                                                                                All Stories:                                                                                                     A short introduction to Diffusion Maps              :       The paper published by J. de la Porte1, B. M. Herbst1, W. Hereman2 and S. J. van der Walt1 in November 2008 describes the mathematical technique for dealing with reducing. . . :                                                                               Stephan                23 Feb 2019                                                                                                                                    Deep Learning and Art Images              :       At kaggle we can find a dataset containing a collection of art images of google images, yandex images and from The Virtual Russian Museum. The dataset has about 9000 images. . . :                                                                               Stephan                09 Feb 2019                                                                                                                                    Forest Cover Type              :       Researchers at the Department of Forest Sciences at Colorado State University collected over half a million measurements from tree observations from four areas of the Roosevelt National Forest in Colorado. . . . :                                                                               Stephan                14 Jan 2019                                                                                                                                    Testing Hypothesis              :       When we are talking about hypothesis testing, what we are merely trying to do is reframing a qualitative question into a mathematical problem. For example, we might ask::                                                                               Stephan                17 Dec 2018                                                                                                                                    Bayes' Theorem              :       Here is how we can read it. The probability of the hypothesis (A) given (conditional) on a new piece of evidence (B) is equal to the probability of the evidence. . . :                                                                               Stephan                12 Dec 2018                                                                                                                                    Mapping Data with folium              :       For my first Data Science project at Flatiron, we got the King County Housing dataset from Kaggle to work with. :                                                                               Stephan                07 Dec 2018                                               &laquo; Prev       1        2      Next &raquo; "
    }, {
    "id": 4,
    "url": "http://localhost:4000/data-ocean.github.io/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/data-ocean.github.io/page2/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "http://localhost:4000/data-ocean.github.io/text_classification_part_3/",
    "title": "Text Classification (Part 3)",
    "body": "2019/04/07 - Using Big Data: The dataset used for that project is an already polished and fairly large corpus by Maciej Szpakowski.  This is an open source dataset composed of millions of news articles mostly scraped from a curated list of 1001 domains from http://www. opensources. co/. Because the list does not contain any reliable websites, additionally NYTimes and Webhose English News Articles articles have been included to balance the classes better. The dataset is still work in progress, and for now, the public version includes only 9,408,908 articles (745 out of 1001 domains). The available data has more than 26GB on disk when we unzip the file and more than 75GB in RAM using pandas. For that reason, I considered using dask. However, loading the CSV file ended in a ParserError (Error tokenizing data. C error: EOF inside string starting at row 63) and apparently, this is a known problem with dask’s read_csv if the file contains a newline character between quotes. To read the CSV file with pandas, the same row (63) ended in a _csv. Error: field larger than field limit (131072). To address that error we have to first increase the csv. field_size_limit. # _csv. Error: field larger than field limit (131072)# https://stackoverflow. com/a/15063941/5983691def csv_field_limit():  maxInt = sys. maxsize  decrement = True  while decrement:    # decrease the maxInt value by factor 10    # as long as the OverflowError occurs.     decrement = False    try:      csv. field_size_limit(maxInt)    except OverflowError:      maxInt = int(maxInt/10)      decrement = TrueThe dataset is not huge but is also larger than we’d like to manage on a laptop, especially if we value interactivity. In any case, let’s have a look at the first 100 rows to see what we have and determine what features we can drop and others we want to keep.  To fix the EOF problem, we can load in the dataset in chunks and loop that way through the dataset. Loading the CSV file in chunks helps but it is impractical to get a full picture of our data. With dask, we can utilise all the cores we have on our laptop.  Now we can get a quick view of what categories and how many we have in our dataset: categories = ddf. category. value_counts(). compute()categories As we can see we need to do some cleaning. We have some oddly named categories and I also checked for null values. From our data exploration, we have a few handy functions to clean the data we will use here again. For example, remove all digits, HTML strings and stopwords from our text and to lemmatise the words. To send the data to separate processes for processing, we can configure dask’s scheduler and set it globally. This option is useful when operating on pure Python objects like strings. dask. config. set(scheduler='processes')Parquet: To save disk space dask encourages dataframes (pandas) users like us to use Parquet. It is a columnar binary format that is easy to split into multiple files (easier for parallel loading) and is generally much simpler to deal with than compared to HDF5 a popular choice for Pandas users with high-performance needs. It is also a common format used by other big data systems like Apache Spark and Apache Impala. For data-sets too big to fit conveniently into memory, like ours, we want to read it in line by line or iterate through the row-groups in a similar way to reading by chunks from CSV with pandas. For the latter, fastparquet makes it possible to do that using iter_row_groups API. pf = ParquetFile('myfile. parq')for df in pf. iter_row_groups():  print(df. shape)  # process sub-data-frame dfAs an alternative option, I found the rows package by Álvaro Justen. Deep Learning Model: For the initial model, I choose to create a Convolutional neural network (CNN) using keras: model = Sequential([	Conv1D(filters, kernel_size, input_shape=(input_shape[0], input_shape[1]),		padding='valid', activation='relu', strides=1),	GlobalMaxPooling1D(),	Dense(hidden_dims),	Dropout(0. 2, activation='relu'),	Dense(1, activation='sigmoid')	])model. compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])Also, to be able to read in the data I needed to create a custom generator to process each line in the CSV file: def _generator_process_line(line):  embedding = np. zeros((max_words, 100))  for i, word in enumerate(line[0]. split()[:max_words]):    if word in glove:      embedding[i] = glove[word]  return embedding, line[1]def Generator(data, batch_size):  while True:    with open(data, 'r') as f:      # skip header      for _ in range(1):        next(f)      batch_i = 0      batch_embedding = np. zeros((batch_size, max_words, 100))      batch_category = np. zeros((batch_size, 1))      reader = csv. reader(f)      for line in reader:        embedding, category = _generator_process_line(line)        if (batch_i + 1) == batch_size:          yield batch_embedding, batch_category          batch_embedding = np. zeros((batch_size, max_words, 100))          batch_category = np. zeros((batch_size, 1))          batch_i = 0        else:          batch_embedding[batch_i] = embedding          batch_category[batch_i, 0] = category          batch_i += 1The following code snippet trains the model on data generated batch-by-batch by the python generator above on one GPU. with tf. device('/gpu:0'):	history = model. fit_generator(Generator(train_data, batch_size),					steps_per_epoch=train_size//batch_size,					validation_data=Generator(valid_data, batch_size),					validation_steps=valid_size//batch_size,					epochs=epochs, verbose=1)Our model returns a near perfect accuracy score of 97. 83%, and if we are looking at the training and validation results, we might be inclined to save the keras model into a single HDF5 file at each epoch. That way we can save the best possible model. We probably could have stopped at the third epoch and saved us a lot of time.  GPU: You may notice the with-statement and recall that I am working on a laptop. To train the model on the laptop is not manageable. To be able to train the model I used paperspace’s gradient service, which includes jupyter notebooks, a job runner, and a python module to run any code on Paperspace GPU cloud. The gradient machine I created is a Quadro P4000 with 8CPU’s and 30GB RAM. One epoch needed about 45 minutes to calculate. Jupyter Notebook: Here is the notebook to that post. What next?: Create two more keras models, one which focuses on its “content” and the other model on its “context”. Furthermore, be able to predict what type of news article do we have - reliable or unreliable. And as a bonus, I like to add linguistic analysis. Finally, build a dashboard. "
    }, {
    "id": 7,
    "url": "http://localhost:4000/data-ocean.github.io/text_classification_part_2/",
    "title": "Text Classification (Part 2)",
    "body": "2019/04/06 - Exploratory Data Analysis: After collecting our data, the first thing we want to do is to get an understanding of it. Exploratory Data Analysis or short EDA is one of the essential steps in the data analysis process. By trying to make sense of the data, we can start formulating questions and if necessary go back and make changes to where our data came from, and others. Remember, the number of source URLs is not very well balanced if we are looking at the categories. We started with 134 URLs categorised as fake and from our source dataset with only 3 reliable URLs, which we increased to over 70 URLs with our own.  However, I went ahead and collected as much data as possible and as it turns out correctly so. As we can see in the image below the distribution turned up-side-down. I wasn’t expecting that at all.  So we don’t need the extra content we got from the archived data at webhose. io. Sentiment: In natural language analysis, one of the first steps one wants to do is understand the sentiment of a given text. Our data is to 75% neutral, which I guess is a good thing. The interesting part here is the thing that for the rest of our data the negative content overweights the positive content drastically.  Moreover, we can see that also in the distribution about the number of words in an article and its sentiment weighting. The shorter an article is, the more likely it is that it is negative content.  Visualizing differences based only on term frequencies: Occasionally, only term frequency statistics are available. In the case where this may happen like in very large, lost, or proprietary data sets. To help us here we can use the tool scattertext which is based on spaCy. TermCategoryFrequencies function is a corpus representation, that can accept this sort of data, along with any categorised documents that happen to be available.  Visualizing TermCategoryFrequencies (link opens in new tab) The critical part to note here is that the data represented in this plot comes from unbalanced data. Topic Modeling: Another question we can try to find an answer to is what are the most written about topics in our news content. We can use Gensim/LDA here to find them but there is a more intuitive and interactive way to help visualise topic model using sklearn and the python library pyLDAvis which is a port of the fabulous R package by Carson Sievert and Kenny Shirley. news_content = df[df. category=='reliable']. news_content. tolist()tf_vectorizer = CountVectorizer(strip_accents = 'unicode',                stop_words = 'english',                lowercase = True,                token_pattern = r'\b[a-zA-Z]{3,}\b',                max_df = 0. 5,                min_df = 10)tfidf_vectorizer = TfidfVectorizer(**tf_vectorizer. get_params())dtm_tfidf = tfidf_vectorizer. fit_transform(news_content)lda_tfidf = LatentDirichletAllocation(n_topics=20, random_state=0)lda_tfidf. fit(dtm_tfidf)vis_data = pyLDAvis. sklearn. prepare(lda_tfidf, dtm_tfidf, tf_vectorizer)pyLDAvis. display(vis_data)pyLDAvis is designed to help users interpret the topics in a topic model that has been fit to a corpus of text data. The package extracts information from a fitted LDA topic model to inform an interactive web-based visualisation. The pyLDAvis interface:  the left panel shows how common and how each topic relates to each other in 2D space.  the right panel shows us a list of the most notable word (topics) and its frequency. If we select a topic, we see the topic-specific frequency of each term (red) and the corpus-wide frequency (blue). Visualizing LDA (link opens in new tab) Linguistic Features: spaCy offers excellent tools to process raw text. Most words are rare, and it’s common for words that look entirely different to mean almost the same thing. The same words in a different order can mean something completely different. Even splitting text into useful word-like units can be difficult in many languages. While it’s possible to solve some problems starting from only the raw characters, it’s usually better to use linguistic knowledge to add useful information. That’s exactly what spaCy is designed to do: you put in raw text and get back a Doc object, that comes with a variety of annotations. To continue working on our Exploratory Data Analysis and help us understand our content we shall use spaCy’s statistical entity recognition system as well as spacy-vis, a visualisation tool using Hierplane. Jupyter Notebook: Here is the notebook to that post. Upcoming: Part 3: I am going to explore how to approach “big” data. "
    }, {
    "id": 8,
    "url": "http://localhost:4000/data-ocean.github.io/text_classification_part_1/",
    "title": "Text Classification (Part 1)",
    "body": "2019/04/02 - Reliable or Unreliable?: Over the past two decades and especially since the United States presidential election 2016 there is an increase in unreliable news content. The question which got and still gets asked is how can we know which is which. To find an answer I started at opensources which curates a list of online information sources. The websites listed range from credible news to misleading and outright fake. The following post is part one in a series of four blog posts:  collecting news content preprocessing data creating a keras model possible next step(s)Collecting News Content: The source list (CSV file) which we can download from opensources has over 800 URLs. The first thing we want to do is to filter out all non-valid URLs. for url in df['url']:  try:    code = urlopen('http://' + url). getcode()  except IOError:    df = df[df. url != url]    code = NoneThe resulting list we got back looks off. When we are looking at the categories and their number count we find that we need to do some cleaning: We have some oddly named categories and a meagre number of only 3 reliable URLs in the list. To address this imbalance, I added about 70 URLs I consider reliable (hopefully) of my own, which doesn’t balance the scale very much but at least pushes it into the right direction. Plus, let us see what and how much content we can scrape from the world wide web before we do something about the source list. Web Scraping: There are several tools to get content from a website, scrapy and beautifulsoup are the two most popular tools probably out there. In both cases, we need to inspect the HTML code of a website. If you are interested to learn more about it, here is an excellent tutorial with tips and tricks using python. In any case, the primary challenge we are facing here is that every website has a different underlying architecture. To determine what the best options are I decided to look at NYTimes. As we can see in the image below, each paragraph is in its separate HTML tag. Collecting content only from the NYTimes website won’t be impossible, it is just exceedingly complicated, and neither of the mentioned tools won’t do it in the long run. If we are considering that we have over 500 labelled URLs, for the scope of this project, it is just not practical. There must be more straightforward ways to tackle this.  API: Luckily, the NYTimes offers an API to excess not only their archive but also search for the most current articles online. Even better, their developer site has a playground to sample what kind of results you can get and fine tune our query. url = 'https://api. nytimes. com/svc/archive/v1/%s/%s. json?api-key=%s'begin_year = 2017end_year = 2018with open('nytimes_data/archivesearch. json', 'w') as f:  with tqdm() as progress:    for year in range(begin_year, end_year + 1):      for month in range(1, 13):        try:          response = requests. get(url % (year, month, NYTIMES_TOKEN))          docs = response. json()['response']['docs']        except Exception:          print('Failed to get {}/{}'. format(year, month))        # There are two rate limits per API: 4,000 requests per day and 10 requests per minute.         # You should sleep 6 seconds between calls to avoid hitting the per minute rate limit.         time. sleep(6)  f. write(ujson. dumps(docs) + '\n')The NYTimes search API gives us a wide range of options to query for data, starting with date range and fields like day_of_week, headline, subject etcetera, as well as news desk values like blogs, cars, fashion and many more. Unfortunately, we only get the lead paragraph from our search which doesn’t help much if we are looking for the full articles. In the end, all we get is metadata, but that’s it. webhose. io: There are a few websites which offer web scraping tools, for example import. io, webhose. io and dexi. io. We can find an extended list here. None are free, but some offer a free trial period and webhose. io is one of them which I ended up using. Like the NYTimes, webhose. io also has a playground to fine tune our query with the main difference that you can see your search request in different coding languages like ruby or python. However, be aware, that you only have 1000 free requests. Unfortunately, we can’t get access to all the URLs we have on our list. However, it gives us at least some data. We can also search through webhose. io’s archived data. newsapi: The final tool I used is the python API from newsapi. The API is very similar to the NYTimes API in the way you write your code to collect the content we want. Like at the NYTimes we mainly get metadata. However, if we are willing to pay, we can get the full article content. for source in news_sources:  # The source is a list similar to  # ['the-verge', 'the-wall-street-journal', 'the-washington-post', 'the-washington-times', 'time', 'usa-today', 'vice-news', 'wired']  #  # we should set the range to the maximum possible number based on the total results devided by page_size  # articles = newsapi. get_everything(sources=source, from_param=str(date), sort_by='relevancy', page_size=100)  # articles['totalResults'] // 100 + 1  for page in range(1, 3):    articles = newsapi. get_everything(sources=source, from_param=str(date), sort_by='relevancy', page_size=100, page=page)    try:      indexes = [i for i, v in enumerate(articles['articles']) if articles['articles'][i]['content'] is None]      for index in sorted(indexes, reverse=True):        del articles['articles'][index]      date_str = date. strftime( %Y%m%d )      filename = '_'. join([source, date_str])      json_file_name = get_json_file(filename, page, json_file_path)      with open(json_file_name, 'w+') as f:        f. write(ujson. dumps(articles) + '\n')        f. close()    except Exception as e:      print(e)Conclusion: If we are serious about getting proper up-to-date news content, I believe that the API from newsapi is your API of choice. However, for the task ahead of us I choose to use the data I collected via webhose. io and may come back at a later time to update the project. Additionally, there is an already polished and fairly large corpus we can use by Maciej Szpakowski. Jupyter Notebook: Here is the notebook to that post. Upcoming: Part 2: I am going to discuss data exploration. "
    }, {
    "id": 9,
    "url": "http://localhost:4000/data-ocean.github.io/an_introductio_to_diffusion_maps/",
    "title": "A short introduction to Diffusion Maps",
    "body": "2019/02/23 - The paper published by J. de la Porte1, B. M. Herbst1, W. Hereman2 and S. J. van der Walt1 in November 2008 describes the mathematical technique for dealing with reducing dimensionality in data. In that paper, the authors give an overview of three well-known dimensionality reduction techniques and introduce diffusion maps and its functionality, process and how it compares with the other methods. Dimensionality Reduction: We are limited in visualising information beyond the third dimension. For simplicity reasons, imagine a black and white image (grey scale) of 100 by 100 pixels, where each pixel represents a variable. The dimensionality would add up to be 10,000. A human would not have any issues with reading the following digits in the picture below, but a computer sees them as a data point in an nm-dimensional coordinate space.  Dimensionality reduction is about converting data of very high dimensionality into data of lower dimensionality while preserving the original information. We can achieve these if one would be able to measure the distance between data points on the manifold itself instead of in Euclidean space by taking into account the data global space. We can use the analogy of zipping text files, compressing large text data into smaller equivalent data. With the minor but significant difference that in dimensionality reduction we will lose some information. The goal here is to not lose too many of the essential features in the data. Popular Techniques: The most popular reduction methods are  Principle Component Analysis (PCA)3, a linear dimensionality reduction technique using Singular Value Decomposition of the data to project it to a lower dimensional space. 4 Multi-dimensional Scaling (MDS)5 seeks a low-dimensional representation of the data in which the distances respect well the distances in the original high-dimensional space. 6 Isometric Feature Map (Isomap)7, a non-linear dimensionality reduction through Isometric Mapping. 8Diffusion Maps: Diffusion maps are a non-linear technique. Similar to taking a random walk on our data, where we jump between data points in feature space (see image below), we are analysing the connectivity of the data. The goal is to reveal the geometric structure of our data at different scales, defining a “time-dependent” diffusion metrics.  By measuring the distances between data points (i. e. Euclidean space), we can define neighbourhoods. In order to achieve it, we define a threshold value in the way of a function (kernel) to obtain the similarity within the geometric structure, which allows us to preserve the underlying information of the given data and be able to connect each neighbourhood. The basic diffusion mapping algorithm can be defined as follows: INPUT: High dimensional data set  Define a kernel, and create a kernel matrix, , such that .  Create the diffusion matrix by normalising the rows of the kernel matrix Calculate the eigenvectors of the diffusion matrix.  Map to the -dimensional diffusion space at time , using the dominant eigenvectors and -valuesOUTPUT: Lower dimensional data set Comparison: The authors also investigated the performance of the different algorithms using a data set with an underlying C-shape for the change of the parameters. As for PCA, once the data is projected onto the two primary axes of variation the ordering of the data along the non-linear C-shape is lost and fails to detect a single parameter. MDS makes a better job in preserving data points in Euclidean space but due to the non-linear structure of the data, MDS cannot preserve the underlying clusters. Conclusion: Diffusion mapping is more robust to noise perturbation and is the only technique that allows geometric analysis at different scales. Footnotes      Applied Mathematics Division, Department of Mathematical Sciences, University of Stellenbosch, South Africa &#8617; &#8617;2 &#8617;3        Colorado School of Mines, United States of America &#8617;        I. T. Jolliffe. Principal component analysis. Springer Verlag New York, 1986.  &#8617;        https://scikit-learn. org/stable/modules/decomposition. html#pca &#8617;        W. S. Torgerson. Multidimensional scaling: I. Theory and method. Psychometrika, 17(4):401–419, 1952.  &#8617;        https://scikit-learn. org/stable/modules/manifold. html#multidimensional-scaling &#8617;        Joshua B. Tenenbaum, Vin de Silva, and John C. Langford. A Global Geometric Framework for Nonlinear Dimensionality Reduction. Science, 290(5500):2319–2323, 2000.  &#8617;        https://scikit-learn. org/stable/modules/manifold. html#isomap &#8617;    "
    }, {
    "id": 10,
    "url": "http://localhost:4000/data-ocean.github.io/deep_learning_art_images/",
    "title": "Deep Learning and Art Images",
    "body": "2019/02/09 - At kaggle we can find a dataset containing a collection of art images of google images, yandex images and from The Virtual Russian Museum. The dataset has about 9000 images with five categories:  Drawings and Watercolors Paintings Sculpture Graphic Art Iconography (old Russian art)Because it is a classification problem, I wanted to use my newly learned knowledge in deep learning and convolutional neural networks (CNN). However, first things first, the downloaded zip file has two more zip files, which it turns out are somewhat similar in context but not quiet. So I decided to combine the two into one dataset. Approach: When I started to research how to tackle the issue for image classification, I found three possible options:  train_test_split, we have to create the train and test data ourselves.  flow_from_dataframe, we need to create first the dataframe ourselves.  flow_from_dictonary, here we don’t need to do any extra work. I, as you may guessed it already, opted for the later. How deep is too deep?: To answer that question, here we need to know one fact first. I am working on a MacBook Pro (2015) with a 2. 2 GHz Intel Core i7 processor and 16GB of RAM. So, how deep is too deep? How many layers can I run on my computer without feeling the pain? To find out I approached it very gingerly, step by step. Or shall I say layer by layer? For the first try, I had only a few layers, which helped with the computation time. However, the result showed a test accuracy of less than 50%. model = models. Sequential([	Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),	MaxPooling2D((2, 2)),	Conv2D(64, (3, 3), activation='relu'),	MaxPooling2D((2, 2)),	Flatten(),	Dense(64, activation='relu'),	Dense(128, activation='relu'),	Dense(5, activation='sigmoid')])To improve the test accuracy, I kept adding layers. I ended up adding several more layers, including Dropout layers to help to avoid over-fitting. model = Sequential([  Conv2D(32, (3, 3), input_shape=input_shape, activation='relu'),  MaxPooling2D(pool_size=(2, 2)),  Dropout(0. 2),  Conv2D(32, (3, 3), activation='relu'),  MaxPooling2D(pool_size=(2, 2)),  Dropout(0. 2),  Conv2D(64, (3, 3), activation='relu'),  MaxPooling2D(pool_size=(2, 2)),  Dropout(0. 2),  Flatten(),  Dense(128, activation='relu'),  Dropout(0. 2),  Dense(64, activation='relu'),  Dropout(0. 2),  Dense(5, activation='softmax')])With the simple sequential model the computational time wasn’t too bad but with the model, seen above, the time went up from several minutes per epochs to nearly 30 minutes per epochs. epochs/batch_size: An epochs is an iteration over the entire provided data; for example, if we have epochs=25 we iterate 25 times over the data. The batch_size is the number of samples that will propagate through the network, by default 32. In our case where we have about 8000 images in the training set, we have 250 batches per epochs. The question is, do we decrease the batch_size to 16 or increase the number to 64? If we decrease the number, we have 500 batches vs 125 batches if we increase the number. Large batch size result in faster processing time and vice versa. In regards to epochs, the model improves with more but only to a point. They start to plateau in accuracy as they converge. Pre-Trained Network: To improve not only the accuracy but also the processing time (so I hoped), I decided to use a pre-trained network. There are a few we can choose from, for example VGG16, VGG19, InceptionV3, and ResNet50 etcetera. I resorted to the VGG model to keep it simple for the time being. VGG is a convolutional neural network model for image recognition proposed by the Visual Geometry Group in the University of Oxford, where VGG16 refers to a VGG model with 16 weight layers, and VGG19 refers to a VGG model with 19 weight layers. Because we have an already trained model, all we have to do is add at least two more layers (Flatten and the output Dense layer) to test what the pre-trained network can do with our dataset. In my case I ended up adding six layers in total: model = Sequential([  vgg_model,  Flatten(),  Dense(32, activation='relu'),  Dense(64, activation='relu'),  Dense(128, activation='relu'),  Dense(64, activation='relu'),  Dense(5, activation='softmax')])Now, the accuracy improved to 96. 68%, up &gt;5% from my previous model, but not the processing time. AWS: In the end, it took several hours to run the model. Moreover, it makes it even more painful if you forget to change your default setting on your MacBook and the computer goes into sleep mode, and nothing get processed at all. To free up the computer I resorted to - welcome - paperspace. Which allows me to prototype locally (prove of concept) and compute in the cloud. Conclusion: Use where you can pre-trained networks and if you are using large data use cloud services. "
    }, {
    "id": 11,
    "url": "http://localhost:4000/data-ocean.github.io/forest/",
    "title": "Forest Cover Type",
    "body": "2019/01/14 - Researchers at the Department of Forest Sciences at Colorado State University collected over half a million measurements from tree observations from four areas of the Roosevelt National Forest in Colorado. All observations are cartographic variables (no remote sensing) from 30-meter x 30-meter sections of forest. The resulting dataset includes information on tree type, shadow coverage, distance to nearby landmarks (roads etcetera), soil type, and local topography. In total there are 55 columns/features. Problem: Can we build a model that predicts what types of trees grow in an area based on the surrounding characteristics? Like elevation, slope, distance, soil type etcetera. Dataset: The dataset has 55 columns in total where Wilderness_Area consists of 4 dummy variables and Soil_Tpye consists of 40 dummy variables. Continuous Data  Elevation (in meters) Aspect (in degrees azimuth1) Slope (in degrees) Horizontal_Distance_To_Hydrology (Horizontal distance to nearest surface water features in meters) Horizontal_Distance_To_Roadways (Horizontal distance to nearest roadway in meters) Horizontal_Distance_To_Fire_Points (Horizontal distance to nearest wildfire ignition points in meters) Vertical_Distance_To_Hydrology (Vertical distance to nearest surface water features in meters) Hillshade_9am (Hill shade index at 9am, summer solstice. Value out of 255) Hillshade_Noon (Hill shade index at noon, summer solstice. Value out of 255) Hillshade_3pm (Hill shade index at 3pm, summer solstice. Value out of 255)Categorical Data  Wilderness Area (4 dummy variable binary columns, 0 = absence or 1 = presence) Soil Type (40 dummy variable binary columns, 0 = absence or 1 = presence)The target variable Cover_Type is defined as an integer value between 1 and 7, with the following key:  Spruce/Fir.  Lodgepole Pine.  Ponderosa Pine.  Cottonwood/Willow Aspen Douglas-fir KrummholzApproach: EDA: The first step with every dataset is to do an Exploratory Data Analysis (EDA). What kind of data do we have? Text or numerical (continues or categorical)? Do we have missing data, or just merely wrong data — values which do not make any sense in the given context, i. e. , 9999. Because of the sheer number of soil types and wilderness areas I had a look at them first. Luckily, the researchers here were efficient in the sense that they document everything meticulously. Everything we need to know with a detailed description can be found online2. From that document, we can find out that  This study area includes four wilderness areas located in the  Roosevelt National Forest of northern Colorado.  These areas  represent forests with minimal human-caused disturbances,  so that existing forest cover types are more a result of  ecological processes rather than forest management practices. Not that this is of any importance for our data exploration or to make a prediction, but I found it interesting to read. Because it makes you think about what kind of implications your result can potentially have. However, what we want to find out is how the data is distributed by Cover_Type. Here I created a seaborn. countplot. tmpList = []for c in soil_df. columns:  tmpList += [str(c)] * soil_df[c]. value_counts()[1]se = pd. Series(tmpList)df['Soil_Types'] = se. valuesplt. figure(figsize=(16, 8))sns. countplot(data=df, x='Soil_Types', hue='Cover_Type')plt. title('Number of Observation by Cover Type')plt. xticks(rotation=90)plt. show(); Looking more closely at the data we can find that the top 5 soil types count for more than 50% of the measurements in the collected data. Unlike categorical data, the continues data is even more interesting to investigate. The questions we want to find answers for are  Do we need to scale/normalise the continuous data? What about skewness/kurtosis? Does it matter if the data is in meter, degree or index? Feature Selection: There are several ways to explore what features we need to keep around to make our prediction. The labour intensive workflow and the much quicker workflow - what I would like to call the “blindfolded method”. For the purpose of gaining more inside, I choose to do both. In the first workflow, I used several classifiers from the sklearn. ensemble Library. These are, AdaBoostClassifier, RandomForestClassifier, GradientBoostingClassifier and ExtraTreeClassifier. All these classifiers have one thing in common, which is the attribute feature_importances_, which returns the feature importance (the higher the value, the more important the feature). # Create an empty dataframe to hold our findings for feature_importances_ranking_df = pd. DataFrame()RFC_model = RandomForestClassifier(random_state=0, n_jobs=-1)RFC_model. fit(X, y)importances = RFC_model. feature_importances_indices = np. argsort(importances)[::-1]# Get feature namerfc_list = [X. columns[indices[f]] for f in range(X. shape[1])]ranking_df['RFC'] = rfc_list# Get feature importancerfci_list = [importances[indices[f]] for f in range(X. shape[1])]ranking_df['RFC importance'] = rfci_listThe result was a pandas data frame with all features from the dataset in order of importance, which allows us to pick the best features. Interestingly, RandomForestClassifier and ExtraTreeClassifier had the most similar results. Other findings from that list were,  Gradian Boosting shows similar names just in a different order compared to Random Forest and Extra Tree.  AdaBoost on the other hand shows an exciting and unique result. The top 8 features alone are enough to make a good class prediction. Compared to all the other classifiers, here we have Wilderness_Area4 on above Elevation in the list.  Elevation dominates in all classifiers with a range of 18-25%, up to 65% in GBC.  Hillshade features are seen in the top 20 in 3 out of 4 classifiers. Random Forest and Extra Tree Classifier show Hillshade features having similar ranges.  Horizontal_Distance_To_Hydrology and Vertical_Distance_To_Hydrology are in all classifiers in the top 10.  Horizontal_Distance_To_Roadways and Horizontal_Distance_To_Fire_Points are represented at the top 3 out of 4 classifiers.  Aspect and Slope also show up in the top 20 across all classifiers, with the exception of Gradian Boosting Slope which isn’t in the top 20.  In regards to Soil_Type, it is hard to find some commonality. Here I choose to select: Soil_Type2, Soil_Type4, Soil_Type10, Soil_Type22, Soil_Type23 and Soil_Type39. The question I asked myself at this point is, was the time wisely spend? After all, it took almost 20 minutes to calculate. One advantage this approach has is, we know our selected features. The other approach we can choose is using PCA (Principal Component Analysis) from sklearn. y = df['Cover_Type']X = df. drop('Cover_Type', axis=1)scaler = StandardScaler()X_scaled = scaler. fit_transform(X)pca = PCA(n_components=20)X_pca = pca. fit_transform(X_scaled)The big advantage to this is the short processing time. However, the drawback, we are losing any knowledge regarding our features. Is that important? Possibly. As you can see in the code snippet above, I opted to scale the features. Researching that topic, I found that there is a multitude of approaches, some use a combination of StandardScaler, MinMaxScaler and Normalizer method and others just picked one of the methods for scaling, centring, normalisation, binarisation and imputation the sklearn. preprocessing module. Some just scale only the continuous features and not the categorical, etcetera. The list of possibilities goes on. For now, I just used the most straightforward way. Evaluate Model: By hand selecting our features, we get an accuracy of 92. 23% and an f1_score of 86. 74% using cross validation. In contrast, PCA has an accuracy of 90. 72% and an f1_score of 84. 44%. Is that a big enough difference to justify the time spent to find our features? Maybe. X_train, X_test, y_train, y_test = train_test_split(X_pca, y, random_state=0)clf = KNeighborsClassifier(weights='distance', n_jobs=-1)clf. fit(X_train, y_train)accuracy = cross_val_score(clf, X_train, y_train, cv = 10, scoring = 'accuracy', n_jobs=-1)f1_score = cross_val_score(clf, X_train, y_train, cv = 10, scoring = 'f1_macro', n_jobs=-1)# predictpredict = clf. predict(X_test)# calculating accuracyaccuracy = accuracy_score(y_test, predict)print('KNeighbors Classifier model')print('Accuracy: {:. 2f}%'. format(accuracy * 100))knn_classification_report = classification_report(y_test, predict)print(knn_classification_report)        To test how accurate we can predict the Cover_Type I used the KNeighborsClassifier from sklearn, and we got an accuracy of 91. 02%. That is great. Conclusion: Yes, we can build a model that predicts what types of trees grow in an area based on the surrounding characteristics. Final Thought: We can use sklearn’s GridSearchCV to find our features (exhaustive search over specified parameter values for an estimator). Moreover, we should make use of sklearn’s Pipeline functionality to write clean and manageable code. One last question, could we use clustering to make our prediction? Footnotes      https://en. wikipedia. org/wiki/Azimuth &#8617;        https://archive. ics. uci. edu/ml/machine-learning-databases/covtype/covtype. info &#8617;    "
    }, {
    "id": 12,
    "url": "http://localhost:4000/data-ocean.github.io/testing_hypothesis/",
    "title": "Testing Hypothesis",
    "body": "2018/12/17 - When we are talking about hypothesis testing, what we are merely trying to do is reframing a qualitative question into a mathematical problem. For example, we might ask: Do discounts have a statistically significant effect on the number of products customers order? If so, at what level(s) of discount? And reframe it to: , the mean of the amount sold in orders with discounts is less or equal to the mean of the amount sold in orders without discounts. Our goal usually is to reject our formulated null hypothesis by calculating the p-value which we generally want to be p &lt; 0. 05  (i. e. , there’s only a 5% chance that two identical distributions could have produced these results). What type of data do we have? Categorical or Numerical?: We first want to find out what type of data we are dealing with whether it is continuous or categorical. For example, we want to find the mean height of all boys in a school year, and we could be very very accurate and measure every boy to the n-th digit after the comma. In this case, we are dealing with continuous (numerical) data. On the other hand, we have categorical data if we want to know if the girls have a significant different preference in what type of fruit (apple, bananas, plums etc) they eat. How many samples am I comparing?:  1 Sample i. e. , comparing an actual result against a desired target 2 Sample i. e. , comparing a control and treatment group or an A/B test More than 2 Sample i. e. , comparing three different variants of a landing page 1 Sample T-Test: Compares a sample mean to a hypothetical population mean. It answers the question “What is the probability that the sample came from a distribution with the desired mean?” Use this when you are comparing against a known target (like a statistic from a paper or a target metric). ttest_1samp requires two inputs, a distribution of values and an expected mean:   tstat, pval = ttest_1samp(example_distribution, expected_mean)  print(pval)2 Sample T-Test: A 2 Sample T-Test compares two sets of data, which are both approximately normally distributed. The null hypothesis, in this case, is that the two distributions have the same mean. Use this when you are comparing two different numerical samples. ttest_ind requires two distributions of values:   tstat, pval = ttest_ind(example_distribution1, example_distribution2)  print(pval)ANOVA: ANOVA compares 2 or more numerical datasets without increasing the probability of a false positive. In order to use ANOVA, The samples are independent. Each sample is from a normally distributed population. The population standard deviations of the groups are all equal. This property is known as homoscedasticity. f_oneway (scipy. stats) requires two or more groups:   fstat, pval = f_oneway(data_group1, data_group2, data_group3, data_groupN)  print(pval)ols (statsmodels)   model_name = ols('outcome_variable ~ group1 + group2 + groupN',           data=your_data). fit()  model_name. summary()Tukey: Tukey’s Range Test compares more than 2 numerical datasets without increasing the probability of a false positive. Unlike ANOVA, Tukey tells us which datasets are significantly different. Many statisticians use Tukey instead of Anova. Note: pairwise_tukeyhsd is from StatsModels, not SciPy! pairwise_tukeyhsd# requires three arguments:  A vector of all data (concatenated using np. concatenate) A vector of labels for the data A level of significance (usually 0. 05)  v = np. concatenate([a, b, c])  labels = ['a'] * len(a) + ['b'] * len(b) + ['c'] * len(c)  tukey_results = pairwise_tukeyhsd(v, labels, 0. 05)Binomial Test: Compares an observed proportion to a theoretical ideal. Examples:  Comparing the actual percent of emails that were opened to the quarterly goals Comparing the actual percentage of respondents who gave a certain survey response to the expected survey responsebinom_test requires three arguments:  The number of successes (the numerator of your proportion) n - the number of trials (the denominator of your proportion) p - the proportion you are comparing to  pval = binomtest(numerator, n=denominator, p=proportion)  print(pval)Chi Squared Test: If we have two or more categorical datasets that we want to compare, we should use a Chi Square test. It is useful in situations like:  An A/B test where half of users were shown a green submit button and the other half were shown a purple submit button. Was one group more likely to click the submit button? Men and women were both given a survey asking “Which of the following three products is your favorite?” Did the men and women have significantly different preferences?chi2_contingency requires a contingency table of all results:   chi2, pval, dof, expected = chi2_contenigency([cat1yes, cat1no],                         [cat2yes, cat2no])  print(pval)Use Case: If we are going back to our example for a null hypothesis from above we can use either the 2 Sample T-Test (ttest_ind) or ANOVA. All approaches depend on how we are going to prepare the data. Let take a practical example and work through it on the Northwind database Microsoft provides. 1. Join ‘OrderDetail’, ‘Product’ and ‘Category’ and assign meaningful names to the features:   SELECT OrderDetail. Id orderdetail_id,      OrderDetail. ProductId orderdetail_prodid,      OrderDetail. Quantity orderdetail_quantity,      OrderDetail. UnitPrice orderdetail_unitprice,      OrderDetail. Discount orderdetail_discount,      Product. Id product_id,      Category. Id category_id,      Category. CategoryName category_name  FROM Category  JOIN Product ON Category. Id = Product. CategoryId  JOIN OrderDetail ON Product. Id = OrderDetail. ProductId;  data = pd. read_sql_query(your_sql_command, engine)$\tiny \ast \text{ The SQL statement should be inside of ```}$ 2. Extract all ‘Unit price’ and split them into two lists for simplicity:   d_df = Q2_df['orderdetail_unitprice']. where(Q2_df['discount_bool'] == 1)  nd_df = Q2_df['orderdetail_unitprice']. where(Q2_df['discount_bool'] == 0)  discount = d_df. tolist()  no_discount = nd_df. tolist()3. Run the 2 Sample T-Test (Note: the ttest_ind creates a readable statement:   stats. ttest_ind(discount, no_discount, equal_var = False)  # Ttest_indResult(statistic=-2. 9756718793666415, pvalue=0. 0034331287209264576)4. As a final step we want to calculate the effect size using Cohen’s $d$. Cohen’s $d$ is typically used to represent the magnitude of differences between two (or more) groups on a given variable, with larger values representing a greater differentiation between the two groups on that variable.   cohens_d = (mean(x) - mean(y)) / (sqrt((stdev(x)**2 + stdev(y)**2) / 2))  print( Cohen's D: {} . format(cohens_d))  # Cohen's D: 0. 45644722995437395. Conclusion, because our p-value (0. 0034) is not significant, we reject the null hypothesis in support of the alternative. Further Reading: Hypothesis Testing is a big topic, and this was just a quick overview of how someone can approach a question using Python. Here is a short list of resources that I fund helpful:  Z-statistics vs. T-statistics - Khan Academy A/B Testing: The Definitive Guide to Improving Your Product - Dataquest Understanding t-Tests - The Minitab Blog A Gentle Introduction to Effect Size Measures in Python - Machine Learning Mastery Robust effect sizes for 2 independent groups - basic statistics"
    }, {
    "id": 13,
    "url": "http://localhost:4000/data-ocean.github.io/bayes_theorem/",
    "title": "Bayes' Theorem",
    "body": "2018/12/12 - Here is how we can read it. The probability of the hypothesis (A) given (conditional) on a new piece of evidence (B) is equal to the probability of the evidence (B) given the hypothesis (A) multiplied by the prior probability of the hypothesis (A) divided by the prior probability of the evidence (B). Ok, let’s stop right here. So I got the following task:  “Write about a topic you are finding particularly challenging. Do it in the form of a tutorial to help another aspiring data scientist to learn that topic. ” Not sure why that is, but probability (P) doesn’t come quickly to me, especially, Bayes’ Theorem. So I made the decision that I would create a blog about it to explain it to myself. If I can do that, it should help others. Now, googling that topic opens a whole world of youtube videos and blogs. Which doesn’t make it any easier. So back to my task. There are several ways to approach Bayes’s Theorem, and the easiest one I found to help me make sense is a tree diagram. To understand the tree diagram for Bayes’ Theorem, let’s demonstrate it on an example. Assume that we have a group of teenagers (girls and boys) and we want to know how many do play soccer. We then would start drawing our tree diagram as follow: Now depending on how many boys and girls we have in the group we can give each branch some weighting. Let’s say we have a group of 13 girls and 7 boys , from which some play soccer and others not . To visualize it on our tree diagram we are adding to each branch two more branches.  If a teenager plays soccer or not intersects whether or not they are a girl or a boy - denoted as for example. Which brings us to the conditional probability of soccer given it is a boy or a girl, eg. . Side note, if we write to describe the complement of S, we are saying “not playing soccer”. By adding the new branches, we can view the first two branches as already happened. We are talking about the prior probability of the hypothesis and prior probability of the evidence . However, before we are moving on, here are two helpful rules to help us solve a given problem.  all values from each branch have to add up to 1 we multiply all value going down a branch Now, before we can answer any questions, we need some more information, given variables. Like, what is the ratio of girls and boys - which already have from above - and what is the likelihood that a boy or girl plays soccer like so, So with that information, we can solve all our branches. Boys and girls which don’t play soccer, as well as our intersections. Note, that we can write our intersection as or , both are the same. Ok, now we can ask questions, for example what is the probability that a girl plays soccer? Or in math terms, . With the conditional probability rule, we can break this up into We know what our numerator is by looking at our tree diagram, . For the denumerator however, we need to find out the whole population playings soccer, both boys and girls, and add them together: So now we can finally solve it: The answer, the probability that a girl plays soccer from that group is 0. 695 or 69. 5%. This is Bayes’ Theorem in a nutshell. "
    }, {
    "id": 14,
    "url": "http://localhost:4000/data-ocean.github.io/mapping_data_with_folium/",
    "title": "Mapping Data with folium",
    "body": "2018/12/07 - For my first Data Science project at Flatiron, we got the King County Housing dataset from Kaggle to work with. I first wanted to know where King County is. Is the county in a rural area, suburban area or just a big city like New York or a combination of some or all of them. To get a basic understanding and feel for what is the data represents. After going through the scrubbing part and dealing with the not so clean data handed, and having a better understanding of what is in the dataset, which leads me to the following questions:  Is location of a house by zip code (neighbourhood) an indicator for the house price? Do zip codes (neighbourhoods) with the higher housing density have an effect on selling price?Also, what visualisation technique should or can I use to present it best? My choice was to use a map to visualise the data. For that, I picked the folium package. The dataset has (not all) the zip codes for King County. To visualise the zip codes, we need the geojson data. Which we luckily can find on the King County website. First, we want to get all zip codes in the dataset into a separate dataset. # Set zipcode type to string (folium)dataset['zipcode'] = dataset['zipcode']. astype('str')​# get the mean value across all data pointszipcode_data = dataset. groupby('zipcode'). aggregate(np. mean)zipcode_data. reset_index(inplace = True)For this example, we want to display the housing density. So we need to sum all zip codes up and add it to our zipcode_data. # count number of houses grouped by zipcodedataset['count'] = 1temp = dataset. groupby('zipcode'). sum()temp. reset_index(inplace = True)temp = temp[['zipcode', 'count']]zipcode_data = pd. merge(zipcode_data, temp, on='zipcode')​# drop count from org datasetdataset. drop(['count'], axis = 1, inplace = True)Before we move on to display “all” zip codes in our dataset, we want to make sure that the geodata has only the zip codes found in our dataset. (Note, this code is not my brainchild). # Get geo data file pathgeo_data_file = os. path. join('data', 'king_county_wa_zipcode_area. geojson')# load GeoJSONwith open(geo_data_file, 'r') as jsonFile:  geo_data = json. load(jsonFile)tmp = geo_data​# remove ZIP codes not in geo datageozips = []for i in range(len(tmp['features'])):  if tmp['features'][i]['properties']['ZIPCODE'] in list(zipcode_data['zipcode']. unique()):    geozips. append(tmp['features'][i])# creating new JSON objectnew_json = dict. fromkeys(['type','features'])new_json['type'] = 'FeatureCollection'new_json['features'] = geozips​# save uodated JSON objectopen( cleaned_geodata. json ,  w ). write(json. dumps(new_json, sort_keys=True, indent=4, separators=(',', ': ')))Finally, we have our function to display our map and housing density. I wrote it as a function I that I could easily visualise other features like house prices. def map_feature_by_zipcode(zipcode_data, col):      Generates a folium map of Seattle  :param zipcode_data: zipcode dataset  :param col: feature to display  :return: m     ​  # read updated geo data  king_geo =  cleaned_geodata. json ​  # Initialize Folium Map with Seattle latitude and longitude  m = folium. Map(location=[47. 35, -121. 9], zoom_start=9,          detect_retina=True, control_scale=False)​  # Create choropleth map  m. choropleth(    geo_data=king_geo,    name='choropleth',    data=zipcode_data,    # col: feature of interest    columns=['zipcode', col],    key_on='feature. properties. ZIPCODE',    fill_color='OrRd',    fill_opacity=0. 9,    line_opacity=0. 2,    legend_name='house ' + col  )​  folium. LayerControl(). add_to(m)​  # Save map based on feature of interest  m. save(col + '. html')​  return m…and our function call. f. map_feature_by_zipcode(zipcode_data, 'count') The main strength I can see in our case is that we can answer our question regarding housing density by zip code. The weakness here, unfortunately, lies in our given dataset itself. Because we only have a subset of about 22k houses represented. Another weakness I can see is. House prices are not so much related to zip codes, instead to neighbourhoods. If we go and look at Zillow, we can search by neighbourhood. Moreover, Zillow offers a geojson file for that. However, I guess I get myself over my head here. "
    }, {
    "id": 15,
    "url": "http://localhost:4000/data-ocean.github.io/why/",
    "title": "“Why did you decide to learn data science?”",
    "body": "2018/12/05 - I don’t remember when I came across “The Visual Display of Quantitative Information” by Edward R. Tufte1, but I remember that I was fascinated by it and read it in one swoop. Moreover, I just wanted to do cool visualisations. However, at that time there was no need for it. Sometime in the early nineties (I believe), I saw a short film by a Japanese computer graphics company visualising all data available at that time about Tokyo. I was just fascinated by it and just wanted to do that. Still, at that time there was no real need for it. At least not in Germany. Fast forward, another Edward Tufte book and much more cool things over the time, I found myself at a crossroad. Do I take the blue pill or the red pill? Because I can’t remember which tablet does what, I decided to take some time off to figure out what I would love to do next. So here I am, rediscovering my fascination for data and visualisation. Looking forward to using my experience in computer graphics and combine it with the newly learned knowledge.       https://www. edwardtufte. com/tufte/books_vdqi &#8617;    "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});